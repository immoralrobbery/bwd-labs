"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbwd_labs"] = self["webpackChunkbwd_labs"] || []).push([["src_scripts_tasks_js"],{

/***/ "./src/scripts/storage.js":
/*!********************************!*\
  !*** ./src/scripts/storage.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadTasks: () => (/* binding */ loadTasks),\n/* harmony export */   saveTasks: () => (/* binding */ saveTasks)\n/* harmony export */ });\nconst TASKS_KEY = 'task-manager-tasks';\n\nfunction saveTasks(tasks) {\n    localStorage.setItem(TASKS_KEY, JSON.stringify(tasks));\n}\n\nfunction loadTasks() {\n    const tasksJson = localStorage.getItem(TASKS_KEY);\n    return tasksJson ? JSON.parse(tasksJson) : [];\n}\n\n//# sourceURL=webpack://bwd-labs/./src/scripts/storage.js?");

/***/ }),

/***/ "./src/scripts/tasks.js":
/*!******************************!*\
  !*** ./src/scripts/tasks.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initTasksPage: () => (/* binding */ initTasksPage)\n/* harmony export */ });\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage.js */ \"./src/scripts/storage.js\");\n\n\nfunction initTasksPage() {\n    const addTaskBtn = document.getElementById('add-task-btn');\n    const taskDialog = document.getElementById('task-dialog');\n    const taskForm = document.getElementById('task-form');\n    const cancelBtn = document.getElementById('cancel-btn');\n    const todoTasks = document.getElementById('todo-tasks');\n    const inProgressTasks = document.getElementById('in-progress-tasks');\n    const doneTasks = document.getElementById('done-tasks');\n    \n    let tasks = (0,_storage_js__WEBPACK_IMPORTED_MODULE_0__.loadTasks)();\n    \n    // Открытие диалогового окна\n    addTaskBtn.addEventListener('click', () => {\n        taskDialog.showModal();\n    });\n    \n    // Закрытие диалогового окна\n    cancelBtn.addEventListener('click', () => {\n        taskDialog.close();\n        taskForm.reset();\n    });\n    \n    // Клик вне диалогового окна\n    taskDialog.addEventListener('click', (e) => {\n        const dialogDimensions = taskDialog.getBoundingClientRect();\n        if (\n            e.clientX < dialogDimensions.left ||\n            e.clientX > dialogDimensions.right ||\n            e.clientY < dialogDimensions.top ||\n            e.clientY > dialogDimensions.bottom\n        ) {\n            taskDialog.close();\n            taskForm.reset();\n        }\n    });\n    \n    // Добавление новой задачи\n    taskForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const taskText = document.getElementById('task-text').value;\n        \n        if (taskText.trim()) {\n            const newTask = {\n                id: Date.now(),\n                text: taskText,\n                status: 'todo',\n                createdAt: new Date().toISOString()\n            };\n            \n            tasks.push(newTask);\n            (0,_storage_js__WEBPACK_IMPORTED_MODULE_0__.saveTasks)(tasks);\n            renderTasks();\n            \n            taskDialog.close();\n            taskForm.reset();\n        }\n    });\n    \n    // Рендеринг задач\n    function renderTasks() {\n        todoTasks.innerHTML = '';\n        inProgressTasks.innerHTML = '';\n        doneTasks.innerHTML = '';\n        \n        tasks.forEach(task => {\n            const taskCard = document.createElement('div');\n            taskCard.className = `task-card ${task.status}`;\n            taskCard.dataset.id = task.id;\n            \n            const taskText = document.createElement('p');\n            taskText.className = 'task-text';\n            taskText.textContent = task.text;\n            \n            const taskActions = document.createElement('div');\n            taskActions.className = 'task-actions';\n            \n            const statusCheckbox = document.createElement('input');\n            statusCheckbox.type = 'checkbox';\n            statusCheckbox.className = 'status-checkbox';\n            statusCheckbox.checked = task.status === 'done';\n            \n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'delete-btn';\n            deleteBtn.textContent = 'Удалить';\n            \n            taskActions.appendChild(statusCheckbox);\n            taskActions.appendChild(deleteBtn);\n            \n            taskCard.appendChild(taskText);\n            taskCard.appendChild(taskActions);\n            \n            // Обработчики событий\n            statusCheckbox.addEventListener('change', () => {\n                updateTaskStatus(task.id);\n            });\n            \n            deleteBtn.addEventListener('click', () => {\n                deleteTask(task.id);\n            });\n            \n            // Размещение задачи в соответствующей колонке\n            if (task.status === 'todo') {\n                todoTasks.appendChild(taskCard);\n            } else if (task.status === 'in-progress') {\n                inProgressTasks.appendChild(taskCard);\n            } else {\n                doneTasks.appendChild(taskCard);\n            }\n        });\n    }\n    \n    // Обновление статуса задачи\n    function updateTaskStatus(taskId) {\n        tasks = tasks.map(task => {\n            if (task.id === taskId) {\n                if (task.status === 'todo') {\n                    task.status = 'in-progress';\n                } else if (task.status === 'in-progress') {\n                    task.status = 'done';\n                } else {\n                    task.status = 'todo';\n                }\n            }\n            return task;\n        });\n        \n        (0,_storage_js__WEBPACK_IMPORTED_MODULE_0__.saveTasks)(tasks);\n        renderTasks();\n    }\n    \n    // Удаление задачи\n    function deleteTask(taskId) {\n        tasks = tasks.filter(task => task.id !== taskId);\n        (0,_storage_js__WEBPACK_IMPORTED_MODULE_0__.saveTasks)(tasks);\n        renderTasks();\n    }\n    \n    // Первоначальный рендеринг\n    renderTasks();\n}\n\n//# sourceURL=webpack://bwd-labs/./src/scripts/tasks.js?");

/***/ })

}]);